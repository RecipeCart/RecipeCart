# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

# access patterns for Recipe
# Get Recipe by recipeName
# Get Recipe by userID (get all recipes created by a user)
# Get Recipe by ingredients
# Get Recipe above a certain rating
# Get Recipe by ingredients above a certain rating
# Owners can CRUD their own recipes

# type Recipe @model @auth(rules: [{allow: private, operations: [read]}, {allow: owner, ownerField: "userID"}, {allow: public, provider: apiKey}]) {
#   id: ID!
#   recipeName: String! @index(name: "byRecipeName", queryField: "recipeByName")
#   dietType: Int! @index(name: "byDietByCuisine", sortKeyFields: ["cuisineType"], queryField: "recipeByDietByCuisine")
#   cuisineType: Int!
#   userID: String 
#     @auth(rules: [{allow: owner, operations: [read, delete]}])
#     @index(name: "byUserID", queryField: "recipeByUserID")

#   ingredients: [Ingredient!]! @hasMany(indexName: "byRecipe", fields: ["id"])
#     #@manyToMany(relationName: "recipeIngredient") 

#   instructions: String!

#   # calculate average ratings based on average of 0-5 ratings
#   ratings: Float! @index(name: "byRatings", queryField: "recipeByRatings")
#   fives: Int
#   fours: Int
#   threes: Int
#   twos: Int
#   ones: Int
#   zeroes: Int

#   likes: Int! @index(name: "byLikes", queryField: "recipeByLikes")
#   saved: Int!
#   views: Int! @index(name: "byViews", queryField: "recipeByViews")
#   image: String
# }


# access patterns for Ingredient
# Any signed-in user can read the ingredient table
# Owners can CRUD their own ingredient copy
# Owners can only read and update the quantity of their ingredient copy
# Get ingredients by userID (for owners to check their own ingredient inventory)
# Get ingredients by recipeID (for recipe's ingredient copies)
# Get ingredients by ingredientName

type Ingredient @model @auth(rules: [
  {allow: private, operations: [read]}, 
  {allow: owner, ownerField: "userID"}, 
  {allow: public, provider: apiKey}
  ]) {
  id: ID! @primaryKey
  # ingredient name as obtained from WOFF
  ingredientName: String! @index(name: "byIngredientName", queryField: "ingredientByName")
  # owner of ingredient (i.e. user)
  userID: String  @index(name: "byUserID", queryField: "ingredientByUserID")
    @auth(rules: [{allow: owner, operations: [read, delete]}, {allow: private, operations: [read]}])
  barcode: String @index(name: "byBarcode", queryField: "ingredientByBarcode") 

  # field to be populated by Weaviate ingredient database
  # list of related names stored in Weaviate. Used to search for recipes containing similar ingredient names
  relatedNames: [String!]!

  # boolean to check if removed from user inventory or not. Default to false upon creation
  removed: Boolean!

  # user's ingredient quantity
  quantity: Float
  unit: String

  # user's ingredient quantity in grams
  standardQuantity: Float

  # recipe: [Recipe] @manyToMany(relationName: "recipeIngredient")
  # recipe: Recipe @belongsTo(fields: ["recipeID"])
  # recipeID: ID @index(name: "byRecipe") # customized foreign key for parent primary key
}


type Settings @model @auth(rules: [
  {allow: owner, operations: [read, update, delete]}, 
  {allow: public, provider: apiKey}
  ]) {
  id: ID!
  email: String!
  owner: String! @index(name: "ByOwner", queryField: "settingsByOwner")
  dietType: Int
  savedRecipes: [String] # recipeID from Weaviate recipe database
  ratedRecipes: [String] #recipeID from Weaviate recipe database
  avoidances: [String] # ingredientName 
  language: Int
  notifications: Boolean
  linkedDevices: [String]
}